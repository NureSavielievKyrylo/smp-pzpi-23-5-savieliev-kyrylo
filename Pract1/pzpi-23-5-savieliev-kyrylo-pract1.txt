МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 1
з дисципліни
«Скриптові мови програмування»
   





Виконав:                                                                                                  Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Савєльєв Кирило 						Сокорчук Ігор Петрович








Харків 2025

ЗАВДАННЯ

     Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
     Ялинка повинна бути симетричною. Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#»
     Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу. Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
     Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску. Параметри скрипта повинні мати додатне значення. Вказані значення повинні округлятися до потрібних у меншу сторону.
     Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.

ХІД РОБОТИ

     Створюємо новий скрипт з назвою pzpi-23-5-savieliev-kyrylo-task1, використовуючи команду touch.
     Вказавши командний інтерпретатор, починаємо з написання перевірки на кількість переданих аргументів:
  1 #!/bin/bash
  2 
  3 if [[ "$#" -ne 2 ]]; then
  4     echo "	Некоректна кількість аргументів" >&2
  5     exit 1
  6 fi
     У випадку, якщо кількість аргументів не дорівнює двом, виводимо у стандартний потік помилок повідомлення про некоректну кількість переданих аргументів та повертаємо відповідний результат у батьківський процес.
     Оголосимо змінні, де будемо зберігати значення висоти ялинки та ширини шару снігу, відповідно:
  8 height=$1
  9 width=$2
     Перевіримо, чи оголошенні змінні є додатними числами, якщо так, виведемо повідомлення про некоректні значення переданих аргументів:
 11 if [[ -z "$height" || -z "$width" || $height -le 0 || $width -le 0 ]]; then
 12     echo "Обидва аргументи мають бути додатними числами" >&2
 13     exit 1
 14 fi
     Оголосимо змінні, що буде зберігати значення мінімальної ширини шару снігу та висоти ялинки відповідно:
 16 min_width=7
 17 min_height=8
     Перевіримо, чи передане значення ширини менше за мінімальне, якщо так, виведемо повідомлення про некоректне значення переданої ширини:
 19 if [[ $width -lt $min_width ]]; then
 20     echo "Довжина шару снігу має бути не менше 7" >&2
 21     exit 1
 22 fi
     Далі перевіримо, чи значення висоти менше за мінімальне, якщо так, виведемо повідомлення про некоректне значення переданого аргументу:
 24 if [[ $height -lt $min_height ]]; then
 25    echo "Висота ялинки має бути не менше 8" >&2
 26    exit 1
 27 fi
     Додамо перевірку, щоб ширина не могла бути більшою за висоту:
 29 if [[ $width -gt $height ]]; then
 30     echo "Ширина не має бути більша за висоту" >&2
 31     exit 1
 32 fi
     Аби зробити ялинку симетричною, як того потребує умова, потрібно аби її ширина була непарною, тож додамо перевірку, якщо передана ширина є парною, вона зменшувалась на одиницю:
 34 if [[ $((width % 2)) -eq 0 ]]; then
 35     width=$((width - 1))
 36 fi
     Якщо ширина менша від висоти більше, ніж на 2, виводимо помилку про неможливість друку ялинки з подібними параметрами:
 38 if [[ $((height - width)) -gt 2 ]]; then
 39     echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
 40     exit 1
 41 fi
     Якщо висота дорівнює ширині, виводимо помилку про неможливість друку ялинки з такими параметрами:
 43 if [[ $height -eq $width ]]; then
 44     echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
 45     exit 1
 46 fi
     Якщо висота більша від ширини на 2, зменшуємо її на одиницю:
 48 if [[ $((height - width)) -eq 2 ]]; then
 49     height=$((height - 1))
 50 fi
     Після написання усіх необхідних для коректної роботи скрипту перевірок, напишемо функцію для виводу ярусу гілок, назвемо її print_row:
 23 print_row() {
 24     local row_width=$1
 25     local symbol=$2
 26     local spaces=$(( (width - row_width) / 2 ))
 27 
 28     for ((i = 0; i < spaces; i++)); do
 29         echo -n " "
 30     done
 31 
 32     for ((i = 0; i < row_width; i++)); do
 33         echo -n "$symbol"
 34     done
 35 
 36     echo
 37 } 
     Функція приймає два аргументи: ширину ярусу, та символ, яким його друкувати. Вони зберігаються у локальних змінних row_width та symbol відповідно. Далі оголошена локальна змінна spaces, яка зберігає значення кількості пробілів, котрі потрібно буде надрукувати, перед тим, як виводити ярус гілок, вона розраховується шляхом віднімання від ширини ярусу снігу ширину поточного ярусу. Наприкінці, виконується команда echo, аби перейти на наступний рядок.
     Оскільки з постановки завдання відомо, що ялинка має складатися з двох рівнобедрених трикутників з ярусів гілок та стовбура, напишемо логіку виведення трикутників з ярусів гілок:
     Після оголошення необхідних змінних, за допомогою циклу for, друкується необхідна кількість пробілів, для друку використовується команда echo з флагом n, завдяки якому, не переноситься рядок. Потім, з використанням тієї ж команди echo з флагом n, виводиться ярус гілок.
     Визначимо ширину найбільшого ярусу гілок, шляхом віднімання двох від ширини шару снігу:
 68 branch_width=$((width - 2))
     Визначимо змінні необхідні для реалізації друку ялинки:
 70 tiers_height=$((height - 3))
 71 
 72 tier1_height=$((tiers_height / 2))
 73 tier2_height=$((tiers_height - tier1_height))
 74 count=1
     Тепер перейдемо до самого друку ялинки:
 76 for tier in 2 1; do
 77     if [[ $tier -eq 2 ]]; then
 78         height=$tier2_height
 79         row_width=1
 80     else
 81         height=$tier1_height
 82         row_width=3
 83     fi
 84 
 85     while [[ $height -ne 0 ]]; do
 86         symbol=$( [[ $((count % 2)) -eq 1 ]] && echo "*" || echo "#" )
 87         print_row $row_width "$symbol"
 88 
 89         count=$((count + 1))
 90         row_width=$((row_width + 2))
 91         height=$((height - 1))
 92     done
 93 done
     На початку циклу, в залежності від ярусу, задаємо його висоту та початкову ширину рядка: .
     У циклі while, що відпрацьовує допоки висота не дорівнює нулю друкуємо рядки ярусу за допомогою описаної раніше функції print_row. Символ, яким буде друкуватися рядок, залежить від того, чи значення змінної-лічильника count є парним або ні: «*» - якщо значення непарне, у противному випадку - «#». На останок, збільшуємо лічильник на одиницю, ширину рядка на 2, а висоту зменшуємо на 1.
     Після того, як трикутники ярусів гілок надруковані, можна перейти до виводу стовбуру, напочатку, визначимо змінну, що буде зберігати поточну висоту стовбура:
 95 trunk_current_height=0
     Друкувати стовбур будемо з використанням циклу until, що буде відпрацьовувати доки поточна висота стовбура не  буде дорівнювати двом:
97 until [ $trunk_current_height -eq 2 ]; do
 98     print_row 3 "#"
 99     trunk_current_height=$((trunk_current_height + 1))
100 done
     У тілі циклу, стовбур буде друкуватися функцією print_row, після чого його поточна висота буде збільшена на одиницю.
     Виведемо шар снігу, використовуючи функцію print_row:
102 print_row $width "*"
     Наприкінці файлу, додамо коментар, що буде позначати завершення файлу:
104 # EOF
     Надамо скрипту права для виконання використовуючи команду chmod:
chmod +x ./pzpi-23-5-savieliev-kyrylo-task1


ВИСНОВКИ

	Під час виконання практичної роботи я набув практичних навичок написання Bash скриптів. Я навчився використовувати різні конструкції мови Bash, такі як функції, умовні конструкції та цикли.
2
