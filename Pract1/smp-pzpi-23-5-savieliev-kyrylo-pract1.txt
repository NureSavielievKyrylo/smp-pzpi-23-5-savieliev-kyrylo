МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра Програмної інженерії

Звіт
з практичної роботи №1
з дисципліни: «Скриптові мови програмування»
з теми: «Розробка Bash скрипту для друку ялинки»

Виконав:

Перевірив:

ст. гр. ПЗПІ-23-5

cт. виклач кафедри ПІ

Cавєльєв К. С.

Сокорчук І. П.

Харків 2025

2
1 ІСТОРІЯ ЗМІН
№ Дата
1 23.05.2025

Версія звіту
0.1

Опис змін та виправлень
Початкова версія

3
2 ЗАВДАННЯ
Написати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок,
стовбура та шару снігу.
Ялинка повинна бути симетричною. Яруси гілок повинні утворювати
правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два
символи та складаються почергово або з символів «*» або з символів «#»
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску. Параметри скрипта повинні мати
додатне значення. Вказані значення повинні округлятися до потрібних у меншу
сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на
екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про
неправильне значення аргумента і повернути відповідний результат у батьківський
процес.

4
3 ОПИС ВИКОНАНОЇ РОБОТИ
Створюємо

новий

скрипт

з

назвою

pzpi-23-5-savieliev-kyrylo-task1,

використовуючи команду touch.
Вказавши командний інтерпретатор, починаємо з написання перевірки на
кількість переданих аргументів:
1
2
3
4
5
6

#!/bin/bash
if [[ "$#" -ne 2 ]]; then
echo " Некоректна кількість аргументів" >&2
exit 1
fi

У випадку, якщо кількість аргументів не дорівнює двом, виводимо у
стандартний потік помилок повідомлення про некоректну кількість переданих
аргументів та повертаємо відповідний результат у батьківський процес.
Оголосимо змінні, де будемо зберігати значення висоти ялинки та ширини
шару снігу, відповідно:
1
2

height=$1
width=$2

Перевіримо, чи оголошенні змінні є додатними числами, якщо так, виведемо
повідомлення про некоректні значення переданих аргументів:
1
2
3
4

if [[ -z "$height" || -z "$width" || $height -le 0 || $width -le
0 ]]; then
echo "Обидва аргументи мають бути додатними числами" >&2
exit 1
fi

Оголосимо змінні, що буде зберігати значення мінімальної ширини шару снігу
та висоти ялинки відповідно:
1
2

min_width=7
min_height=8

Перевіримо, чи передане значення ширини менше за мінімальне, якщо так,
виведемо повідомлення про некоректне значення переданої ширини:

5
1
2
3
4

if [[ $width -lt $min_width ]]; then
echo "Довжина шару снігу має бути не менше 7" >&2
exit 1
fi

Далі перевіримо, чи значення висоти менше за мінімальне, якщо так,
виведемо повідомлення про некоректне значення переданого аргументу:
1
2
3
4

if [[ $height -lt $min_height ]]; then
echo "Висота ялинки має бути не менше 8" >&2
exit 1
fi

Додамо перевірку, щоб ширина не могла бути більшою за висоту:
1
2
3
4

if [[ $width -gt $height ]]; then
echo "Ширина не має бути більша за висоту" >&2
exit 1
fi

Аби зробити ялинку симетричною, як того потребує умова, потрібно аби її
ширина була непарною, тож додамо перевірку, якщо передана ширина є парною,
вона зменшувалась на одиницю:
1
2
3

if [[ $((width % 2)) -eq 0 ]]; then
width=$((width - 1))
fi

Якщо ширина менша від висоти більше, ніж на 2, виводимо помилку про
неможливість друку ялинки з подібними параметрами:
1
2
3
4

if [[ $((height - width)) -gt 2 ]]; then
echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
exit 1
fi

Якщо висота дорівнює ширині, виводимо помилку про неможливість друку
ялинки з такими параметрами:
1
2
3
4

if [[ $height -eq $width ]]; then
echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
exit 1
fi

6
Якщо висота більша від ширини на 2, зменшуємо її на одиницю:
1
2
3

if [[ $((height - width)) -eq 2 ]]; then
height=$((height - 1))
fi

Після написання усіх необхідних для коректної роботи скрипту перевірок,
напишемо функцію для виводу ярусу гілок, назвемо її print_row:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

print_row() {
local row_width=$1
local symbol=$2
local spaces=$(( (width - row_width) / 2 ))
for ((i = 0; i < spaces; i++)); do
echo -n " "
done
for ((i = 0; i < row_width; i++)); do
echo -n "$symbol"
done
echo
}

Функція приймає два аргументи: ширину ярусу, та символ, яким його
друкувати. Вони зберігаються у локальних змінних row_width та symbol відповідно.
Далі оголошена локальна змінна spaces, яка зберігає значення кількості пробілів,
котрі потрібно буде надрукувати, перед тим, як виводити ярус гілок, вона
розраховується шляхом віднімання від ширини ярусу снігу ширину поточного ярусу.
Наприкінці, виконується команда echo, аби перейти на наступний рядок.
Оскільки з постановки завдання відомо, що ялинка має складатися з двох
рівнобедрених трикутників з ярусів гілок та стовбура, напишемо логіку виведення
трикутників з ярусів гілок:
Після оголошення необхідних змінних, за допомогою циклу for, друкується
необхідна кількість пробілів, для друку використовується команда echo з флагом n,
завдяки якому, не переноситься рядок. Потім, з використанням тієї ж команди echo
з флагом n, виводиться ярус гілок.
Визначимо ширину найбільшого ярусу гілок, шляхом віднімання двох від
ширини шару снігу:

7
1

branch_width=$((width - 2))

Визначимо змінні необхідні для реалізації друку ялинки:
1
2
3
4
5

tiers_height=$((height - 3))
tier1_height=$((tiers_height / 2))
tier2_height=$((tiers_height - tier1_height))
count=1

Тепер перейдемо до самого друку ялинки:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

for tier in 2 1; do
if [[ $tier -eq 2 ]]; then
height=$tier2_height
row_width=1
else
height=$tier1_height
row_width=3
fi
while [[ $height -ne 0 ]]; do
symbol=$( [[ $((count % 2)) -eq 1 ]] && echo "*" || echo
"#" )
print_row $row_width "$symbol"
count=$((count + 1))
row_width=$((row_width + 2))
height=$((height - 1))
done
done

На початку циклу, в залежності від ярусу, задаємо його висоту та початкову
ширину рядка.
У циклі while, що відпрацьовує допоки висота не дорівнює нулю друкуємо
рядки ярусу за допомогою описаної раніше функції print_row. Символ, яким буде
друкуватися рядок, залежить від того, чи значення змінноїлічильника count є парним
або ні: «*» - якщо значення непарне, у противному випадку - «#». На останок,
збільшуємо лічильник на одиницю, ширину рядка на 2, а висоту зменшуємо на 1.
Після того, як трикутники ярусів гілок надруковані, можна перейти до виводу
стовбуру, напочатку, визначимо змінну, що буде зберігати поточну висоту стовбура:
1

trunk_current_height=0

8
Друкувати стовбур будемо з використанням циклу until, що буде
відпрацьовувати доки поточна висота стовбура не буде дорівнювати двом:
1
2
3
4

until [ $trunk_current_height -eq 2 ]; do
print_row 3 "#"
trunk_current_height=$((trunk_current_height + 1))
done

У тілі циклу, стовбур буде друкуватися функцією print_row, після чого його
поточна висота буде збільшена на одиницю.
Виведемо шар снігу, використовуючи функцію print_row:
1

print_row $width "*"

Наприкінці файлу, додамо коментар, що буде позначати завершення файлу:
1

# EOF

9
4 ВИСНОВКИ
Під час виконання практичної роботи я набув практичних навичок написання
Bash скриптів. Я навчився використовувати різні конструкції мови Bash, такі як
функції, умовні конструкції та цикли.

10
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів https://youtu.be/CE8NkAEjJbg
Хронологічний опис відеозапису:
00:00 — Представлення
00:20 — Розбір коду
09:18 — Демонстрація роботи скрипта

11
ДОДАТОК Б
Програмний код
Б.1 Зміст файлу «pzpi-23-5-savieliev-kyrylo-pract1-code»
Github репозиторій
1
2
3
4
5
6
7
8
9
10
11

#!/bin/bash
if [[ "$#" -ne 2 ]]; then
echo " Некоректна кількість аргументів" >&2
exit 1
fi
height=$1
width=$2

if [[ -z "$height" || -z "$width" || $height -le 0 || $width -le
0 ]]; then
12
echo "Обидва аргументи мають бути додатними числами" >&2
13
exit 1
14 fi
15
16 min_width=7
17 min_height=8
18
19 if [[ $width -lt $min_width ]]; then
20
echo "Довжина шару снігу має бути не менше 7" >&2
21
exit 1
22 fi
23
24 if [[ $height -lt $min_height ]]; then
25
echo "Висота ялинки має бути не менше 8" >&2
26
exit 1
27 fi
28
29 if [[ $width -gt $height ]]; then
30
echo "Ширина не має бути більша за висоту" >&2
31
exit 1
32 fi
33
34 if [[ $((width % 2)) -eq 0 ]]; then
35
width=$((width - 1))
36 fi
37
38 if [[ $((height - width)) -gt 2 ]]; then
39
echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
40
exit 1
41 fi
42
43 if [[ $height -eq $width ]]; then
44
echo "Неможливо роздрукувати ялинку з такими параметрами" >&2
45
exit 1

12
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86

fi
if [[ $((height - width)) -eq 2 ]]; then
height=$((height - 1))
fi
print_row() {
local row_width=$1
local symbol=$2
local spaces=$(( (width - row_width) / 2 ))
for ((i = 0; i < spaces; i++)); do
echo -n " "
done
for ((i = 0; i < row_width; i++)); do
echo -n "$symbol"
done
echo
}
branch_width=$((width - 2))
tiers_height=$((height - 3))
tier1_height=$((tiers_height / 2))
tier2_height=$((tiers_height - tier1_height))
count=1
for tier in 2 1; do
if [[ $tier -eq 2 ]]; then
height=$tier2_height
row_width=1
else
height=$tier1_height
row_width=3
fi

while [[ $height -ne 0 ]]; do
symbol=$( [[ $((count % 2)) -eq 1 ]] && echo "*" || echo
"#" )
87
print_row $row_width "$symbol"
88
89
count=$((count + 1))
90
row_width=$((row_width + 2))
91
height=$((height - 1))
92
done
93 done
94
95 trunk_current_height=0
96
97 until [ $trunk_current_height -eq 2 ]; do
98
print_row 3 "#"
99
trunk_current_height=$((trunk_current_height + 1))
100 done

13
101
102 print_row $width "*"
103
104 # EOF
