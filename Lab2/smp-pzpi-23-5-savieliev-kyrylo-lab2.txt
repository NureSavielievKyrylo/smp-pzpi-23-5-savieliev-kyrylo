МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра Програмної інженерії

Звіт
з лабораторної роботи №2
з дисципліни: «Скриптові мови програмування»
з теми: «Розробка консольного застосунку "Продовольчий магазин 'Весна'"»

Виконав:

Перевірив:

ст. гр. ПЗПІ-23-5

cт. виклач кафедри ПІ

Cавєльєв К. С.

Сокорчук І. П.

Харків 2025

2
1 ІСТОРІЯ ЗМІН
№ Дата
1 23.05.2025

Версія звіту
0.1

Опис змін та виправлень
Початкова версія

3
2 ЗАВДАННЯ
Розробити

консольний

застосунок

«Продовольчий

магазин

’Весна’».

Програма після запуску повинна вивести на термінал перелік можливих дій. Далі
програма очікує введення значення з клавіатури. Якщо користувач вводить число,
якого немає в списку можливих команд, необхідно вивести повідомлення про
помилку і запропонувати користувачу ввести інше число:Далі програма очікує
введення значення з клавіатури.
Якщо користувач вводить число, якого немає в списку можливих команд,
необхідно вивести повідомлення про помилку і запропонувати користувачу ввести
інше число.
Щоб розпочати купувати товари, необхідно ввести число «1», після чого
користувач повинен потрапити в режим закупівлі товарів. На екрані має з’явитися
перелік продуктів, де кожен рядок складається з номера, назви товару і його
вартості.
Щоб купити товар, необхідно ввести його номер. Після успішної перевірки на
існування номера товару в списку, програма має попросити ввести кількість товару.
Якщо номер товару і його кількість (менше 100 шт.) були вказані коректно, то
товар додається в кошик. Якщо вказано кількість «0», то товар видаляється з кошика.
Далі знову відображається перелік товарів і пропонується купити наступний
товар. Якщо номер товару вказано неправильно, виводиться сповіщення про
помилку, нову виводиться перелік товарів.
Щоб завершити купувати товари і перейти до попереднього меню, необхідно
ввести з клавіатури цифру «0». Щоб отримати підсумковий рахунок, потрібно
ввести число «2». Рахунок має містити таку інформацію: №, назва, ціна товару,
кількість товару, вартість товару. У кінці чека має бути: «РАЗОМ ДО CПЛАТИ:
сума_за_всі_товари»
Щоб встановити свій профіль потрібно, ввести число «3», після чого програма
попросить ввести ваше ім’я та ваш вік. Імʼя користувача не може бути порожнім і
повинно містити хоча б одну літеру. Користувач не може бути молодшим 7-ми або
старшим 150-ти років.
Щоб завершити роботу та вийти з програми, потрібно ввести число «0».

4
У програмі потрібно перевіряти інформацію, яку вводить користувач:
–

обраний пункт меню існує;

–

обраний товар існує;

–

введена кількість товару більша нуля;

–

імʼя користувача містить хоча б одну літеру;

–

вік користувача становить від 7-ми до 150-ти років.

5
3 ОПИС ВИКОНАНОЇ РОБОТИ
Кінцевий консольний застосунок був розроблений відповідно до концепцій
ООП (Обʼєктно-орієнтованого програмування), та складається з декількох
ключових класів:
–

«App» - основний класс, є точкою входу в програму, та відповідає за
взаємодію користувача з програмою;

–

«GoodsCatalog» - відповідає за роботу з каталогом продуктів, що
зберігаються у окремому JSON файлі;

–

«Cart» - відповідає за роботу з корзиною товарів користувача;

–

«User» - відповідає за зберігання даних про користувача (імʼя, вік);

–

«Restrictions» - є класом обгорткою для збереження обмежень, щодо віку
користувача.

Спочатку реалізовано клас «Restrictions», що, як вже було сказано вище, є
обгорткою для збереження обмежень, щодо віку користувача, що знадобляться нам
для валідації від час введення користувачем особистих даних:
1
2
3
4

class Restrictions {
public static int $MIN_AGE = 7;
public static int $MAX_AGE = 150;
}

Далі визначається функція «prettifyGoodName», що слугує для додавання
необхідної кількості пробілів після назви товару, що вона приймає, як аргумент.
На початку функції у змінній «pad_length» розраховуюється кількість пробілів, що
потрібно буде вставити після назви, шляхом віднімання від 20 довжини рядка назви,
потім перевіряється чи є значення цієї змінної строго більшим за нуль, якщо так,
з використанням функції «str_repeat», формується рядок з необхідною кількістю
пробілів і повертається конкатенований рядок, що складається з назви товару
та вищезгаданого рядка, якщо ж значення змінної «pad_length» дорівнює нулю
повертається незмінена назва товару.
1
2
3
4
5

function prettifyGoodName(string $name): string {
$pad_length = 20 - mb_strlen($name);
if ($pad_length > 0) {
$pad = str_repeat(" ", $pad_length);

6
6
7
8
9
10

return $name . $pad;
}
return $name;
}

Перейдемо до реалізації класу «GoodsCatalog», що відповідає за роботу з
даними про товари в магазині.
Клас має приватні поля «goods» типу масив, де зберігаються товари та
статичне поле «PATH», де зберігається шлях до JSON файлу з списком товарів.
1
2

private static string $PATH = "./data/goods.json"
private array $goods;

У конструкторі класу відбувається присвоєння полю «goods» даних, що
повертає метод «loadGoods» для подальших операцій з ними у методах класу, це
зроблено так, оскільки зчитування файлу з даними на кожен виклик методів, що з
ними працюють було не ефективним та просто марнувало б ресурси пристрою на
якому виконується програма.
1
2
3
4
5
6
7
8
9

public function __construct() {
$this->goods = $this->loadGoods();
}
private function loadGoods(): array {
$jsonString=file_get_contents(GoodsCatalog::$PATH);
return json_decode($jsonString, true);
}

У методі «getGoods» повертається масив завантажених товарів.
1
2
3

public function getGoods(): array {
return $this->goods;
}

Методи

«getGoodByName»

та

«getGoodById»

використовуються

для

отримання товару за імʼям або ідентифікатором відповідно, вони реалізовані за
допомогою внутрішньої PHP функції «array_find», що приймає два аргумента:
масив та функцію предикат завдяки якій буде відбуватися пошук потрібного
елементу.

7
1
2
3
4
5
6

public function getGoodById(int $id) {
return array_find($this->goods, fn($good) => $good["id"] == $id);
}
public function getGoodByName(string $name) {
return array_find($this->goods, fn($good) => $good["name"] ==
$name);
}

7

Натупним роздивимося клас «Cart», що відповідає за роботу з корзиною
товарів.
Клас містить приватне поле «items», для зберігання товарів, що були додані
до корзини, у вигляді асоціативного масиву, де ключем є назва товару, а значенням
- кількість товару у кошику.
1

private array $items = [];

Метод «isEmpty» повератає булеве значення чи є кошик порожнім.
1
2
3

public function isEmpty(): bool {
return empty($this->items);
}

Метод «getItems» повертає масив товарів доданих в корзину.
1
2
3

public function getItems(): array {
return $this->items;
}

Метод «addItem» відповідає та додавання товару до корзини, він приймає два
аргументи: назву товару та кількість. У тілі методу напочатку перевіряється чи є
кількість товару неприйнятною, менша за нуль або не менша від 100, у такому
разі відбувається вихід з методу. Далі, якщо кількість дорівнює нулю, товар з
відповідною назвою видаляється з кошику, відповідно до завдання, за допомогою
внутрішнього методу «removeItem». Якщо ж кількість товару є відмінною від вище
зазначених - товар додається до кошику.
1
2
3
4
5

public function addItem(string $name, int $quantity): void {
if ($quantity < 0 && $quantity >= 100) {
return;
}

8
6
7
8
9
10
11

if ($quantity == 0) {
$this->removeItem($name);
} else {
$this->items[$name] = $quantity;
}
}

Метод «removeItem», видаляє товар з кошику за допомогою внутрішньої PHP
функції «unset».
1
2
3

public function removeItem(string $name): void {
unset($this->items[$name]);
}

Метод «calculateTotal» розраховує суму до сплати. він приймає клас
«GoodsCatalog», як агрумент. У тілі методу, напочатку оголошується змінна «total»,
що буде слугувати для підрахунку суми, потім у циклі foreach ми ітеруємося
по наявним у корзині товарам, завдки методу «getGoodByName», знаходимо
відповідний товар у каталозі, якщо він існує додаємо до змінної «total» добуток ціни
товару та його кількості в корзині. Після ітерування повертаємо змінну «total».
1
2
3
4
5
6
7
8
9
10
11
12
13

public function calculateTotal(GoodsCatalog $catalog): int {
$total = 0;
foreach ($this->items as $name => $quantity) {
$good = $catalog->getGoodByName($name);
if ($good) {
$total += $good["price"] * $quantity;
}
}
return $total;
}

Наступним розглянемо клас «User», він має два приватних поля «name» та
«age», зі значеннями пустого рядка та нуля за замовчуванням, відповідно:
1
2

private string $name = "";
private int $age = 0;

Також клас має два метода сеттера для задання імені та віку:
1

public function setName(string $name): void {

9
2
3
4
5
6
7

$this->name = $name;
}
public function setAge(int $age): void {
$this->age = $age;
}

Перейдемо до головного класу застосунку - класу «App». Він, як вже було
сказано раніше відповідає за взаємодію з користувачем
Клас має приватні поля для каталогу товарів, корзини та користувача
відповідно:
1
2
3

private GoodsCatalog $catalog;
private Cart $cart;
private User $user;

У

конструкторі

відбувається

ініціалізація

класів

відповідальних

за

представлення каталогу товарів, корзини товарів та користувача:
1
2
3
4
5

public function __construct() {
$this->catalog = new GoodsCatalog();
$this->cart = new Cart();
$this->user = new User();
}

У методі «renderMainMenu» відбувається відображення в консоль головного
меню програми:
1
2
3
4
5
6
7
8
9
10

private function renderMainMenu(): void {
echo "\n################################\n";
echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
echo "################################\n";
echo "1 Вибрати товари\n";
echo "2 Отримати підсумковий рахунок\n";
echo "3 Налаштувати свій профіль\n";
echo "0 Вийти з програми\n";
echo "Введіть команду: ";
}

У методі «renderGoodsList» відбувається відображення списку товарів у
консоль:
1
2
3

private function renderGoodsList(): void {
$goods = $this->catalog->getGoods();

10
4
5
6
7
8
9
10
11
12
13

echo "№

НАЗВА

ЦІНА\n";

foreach ($goods as $good) {
printf("%-2s %-24s %5s\n", $good["id"],
prettifyGoodName($good["name"]), $good["price"]);
}
echo "
-----------\n";
echo "0 ПОВЕРНУТИСЯ\n";
echo "Виберіть товар: ";
}

У методі «renderCart» відбувається відображення у консоль корзини:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19

private function renderCart(): void {
if ($this->cart->isEmpty()) {
echo "КОШИK ПОРОЖНІЙ\n";
return;
}
$cartItems = $this->cart->getItems();

echo "У КОШИКУ:\nНАЗВА
КІЛЬКІСТЬ\n";
echo "---------------------------------\n";
foreach ($cartItems as $name => $qty) {
$good = $this->catalog->getGoodByName($name);
$sum = $good["price"] * $qty;
printf("%-24s %5s\n", prettifyGoodName($name), $qty);
}
echo "---------------------------------\n";
}

У методі «renderTotal» відбувається відображення корзини у консоль з
загальною сумою до сплати:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

private function renderTotal(): void {
if ($this->cart->isEmpty()) {
echo "КОШИK ПОРОЖНІЙ\n";
return;
}
$cartItems = $this->cart->getItems();
$i = 1;
echo "№ НАЗВА
ЦІНА
КІЛЬКІСТЬ
echo "---------------------------------\n";
foreach ($cartItems as $name => $qty) {
$good = $this->catalog->getGoodByName($name);
$sum = $good["price"] * $qty;

ВАРТІСТЬ\n";

11
16
17

printf("%-2s %-24s %6s %9s %9s\n", $i++,
prettifyGoodName($name), $good["price"], $qty, $sum);
}
echo "---------------------------------\n";

18
19
20
21
22
23

$total = $this->cart->calculateTotal($this->catalog);
printf("РАЗОМ ДО СПЛАТИ: %s\n", $total);
}

У

методі

«getUserInput»

відбувається

отримання

тексту

введеного

користувачем у потік вводу:
1
2
3
4
5

private function getUserInput(): string {
$input = fgets(STDIN);
return $input ? trim($input) : "";
}

У методі «handleGoodSelection» відбувається обробка вибору товару
користувачем, у нескінченному циклі напочатку виводиться список товарів, потім
зчитуються дані введені користувачем, якщо було введено «0» цикл перериває свою
роботу та відбувається вихід методу, у іншому ж випадку відбувається пошук товару
за ідентифікатором, що ввів користувач, якщо товару не існує виводиться відповідне
повідомлення та відбувається повернення у початок циклу, якщо ж товар знайдено,
програма просить користувача ввести кількість товару, якщо вхідні дані не є
невідʼємним цілим числом, виводиться відповідне повідомлення та відбувається
повернення у початок циклу, у противному випадку відповідний товар додається до
кошика та у консоль виводиться корзина, цикл продовжується:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15

private function handleGoodSelection(): void {
while (true) {
$this->renderGoodsList();
$selectedId = $this->getUserInput();
if ($selectedId == "0") {
break;
}
$good = $this->catalog->getGoodById($selectedId);
if (!$good) {
echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
continue;

12
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31

}
echo "Вибрано: {$good["name"]}\n";
echo "Введіть кількість, штук: ";
$quantityInput = $this->getUserInput();
if (!ctype_digit($quantityInput)) {
echo "ПОМИЛКА! Кількість повинна бути цілим невід'ємним
числом.\n";
continue;
}
$this->cart->addItem($good["name"], $quantityInput);
$this->renderCart();
}
}

У методі «setupProfile» відбувається заповнення профілю користувача.
Напочатку програма просить користувача ввести імʼя, якщо воно не збігається з
регулярним виразом, програма знову просить ввести імʼя, якщо ж вхідні дані такі
збіглися, імʼя записується у відповідне поле обʼєкту класу «User», потім подібний
процес відбувається з віком користувача:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18

private function setupProfile(): void {
do {
echo "Ваше імʼя: ";
$userName = $this->getUserInput();;
} while (!preg_match("/^\p{L}+$/u", $userName));
$this->user->setName($userName);
do {
echo "Ваш вік: ";
$userAge = $this->getUserInput();
$inRange = $userAge >= Restrictions::$MIN_AGE && $userAge <=
Restrictions::$MAX_AGE;
} while (!preg_match("/^\d+$/u", $userAge) || !$inRange);
$this->user->setAge($userAge);
}

Врешті, перейдемо до методу, що відповідає за запуск програми - «run». У
нескінченному циклі напочатку у консоль виводиться головне меню, потім програма
очікує вхідних даних від користувача та виводить відповідну інформацію у консоль
в залежності від вхідних даних:

13
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25

public function run(): void {
while (true) {
$this->renderMainMenu();
$prompt = $this->getUserInput();
switch ($prompt) {
case "1":
$this->handleGoodSelection();
break;
case "2":
$this->renderTotal();
break;
case "3":
$this->setupProfile();
break;
case "0":
echo "Дякуємо за покупку в магазині \"Весна\"! До
побачення!\n";
exit;
default:
echo "ПОМИЛКА! Введіть правильну команду\n";
break;
}
}
}

На прикінці файлу створюється екземпляр класу «App» та викликається метод
«run», що запускає програму:
1
2
3

$app = new App();
$app->run();

14
4 ВИСНОВКИ

15
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів https://youtu.be/bJQj1uKtnus
Хронологічний опис відеозапису:
00:00 — Назва та стислий опис першого фрагмента відео
00:00 — Назва та стислий опис першого фрагмента відео
00:00 — Назва та стислий опис першого фрагмента відео
00:00 — Назва та стислий опис першого фрагмента відео

16
ДОДАТОК Б
Графічні матеріали

Рисунок 2.1 – Головне меню

Рисунок 2.2 – Список товарів

17

Рисунок 2.3 – Порожній кошик

18

Рисунок 2.4 – Додавання товару в кошик

19

Рисунок 2.5 – Видалення товару з кошику

20

Рисунок 2.6 – Наповнений кошик

Рисунок 2.7 – Налаштування профілю

21
ДОДАТОК В
Програмний код
В.1 Зміст файлу «index.php»
Github репозиторій
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31

<?php
class Restrictions {
public static int $MIN_AGE = 7;
public static int $MAX_AGE = 150;
}
function prettifyGoodName(string $name): string {
$pad_length = 20 - mb_strlen($name);
if ($pad_length > 0) {
$pad = str_repeat(" ", $pad_length);
return $name . $pad;
}
return $name;
}
class GoodsCatalog {
private array $goods;
public function __construct() {
$this->goods = $this->loadGoods();
}
public function getGoods(): array {
return $this->goods;
}

public function getGoodById(int $id) {
return array_find($this->goods, fn($good) => $good["id"] ==
$id);
32
}
33
34
public function getGoodByName(string $name) {
35
return array_find($this->goods, fn($good) => $good["name"] ==
$name);
36
}
37
38
private function loadGoods(): array {
39
$jsonString=file_get_contents("./data/goods.json");
40
41
return json_decode($jsonString, true);
42
}
43 }
44

22
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100

class Cart {
private array $items = [];
public function isEmpty(): bool {
return empty($this->items);
}
public function getItems(): array {
return $this->items;
}
public function addItem(string $name, int $quantity): void {
if ($quantity < 0 || $quantity >= 100) {
return;
}
if ($quantity == 0) {
$this->removeItem($name);
} else {
$this->items[$name] = $quantity;
}
}
public function removeItem(string $name): void {
unset($this->items[$name]);
}
public function calculateTotal(GoodsCatalog $catalog): int {
$total = 0;
foreach ($this->items as $name => $quantity) {
$good = $catalog->getGoodByName($name);
if ($good) {
$total += $good["price"] * $quantity;
}
}
return $total;
}
}
class User {
private string $name = "";
private int $age = 0;
public function setName(string $name): void {
$this->name = $name;
}
public function setAge(int $age): void {
$this->age = $age;
}
}
class App {

23
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154

private GoodsCatalog $catalog;
private Cart $cart;
private User $user;
public function __construct() {
$this->catalog = new GoodsCatalog();
$this->cart = new Cart();
$this->user = new User();
}
private function renderMainMenu(): void {
echo "\n################################\n";
echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
echo "################################\n";
echo "1 Вибрати товари\n";
echo "2 Отримати підсумковий рахунок\n";
echo "3 Налаштувати свій профіль\n";
echo "0 Вийти з програми\n";
echo "Введіть команду: ";
}
public function run(): void {
while (true) {
$this->renderMainMenu();
$prompt = $this->getUserInput();
switch ($prompt) {
case "1":
$this->handleGoodSelection();
break;
case "2":
$this->renderTotal();
break;
case "3":
$this->setupProfile();
break;
case "0":
echo "Дякуємо за покупку в магазині \"Весна\"! До
побачення!\n";
exit;
default:
echo "ПОМИЛКА! Введіть правильну команду\n";
break;
}
}
}
private function renderGoodsList(): void {
$goods = $this->catalog->getGoods();
echo "№

НАЗВА

ЦІНА\n";

foreach ($goods as $good) {
printf("%-2s %-24s %5s\n", $good["id"],
prettifyGoodName($good["name"]), $good["price"]);

24
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184

}
echo "
-----------\n";
echo "0 ПОВЕРНУТИСЯ\n";
echo "Виберіть товар: ";
}
private function handleGoodSelection(): void {
while (true) {
$this->renderGoodsList();
$selectedId = $this->getUserInput();
if ($selectedId == "0") {
break;
}
$good = $this->catalog->getGoodById($selectedId);
if (!$good) {
echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
continue;
}
echo "Вибрано: {$good["name"]}\n";
echo "Введіть кількість, штук: ";
$quantityInput = $this->getUserInput();

if (!ctype_digit($quantityInput)) {
echo "ПОМИЛКА! Кількість повинна бути цілим невід'ємним
числом.\n";
185
continue;
186
}
187
188
$this->cart->addItem($good["name"], $quantityInput);
189
190
$this->renderCart();
191
}
192
}
193
194
private function renderTotal(): void {
195
if ($this->cart->isEmpty()) {
196
echo "КОШИK ПОРОЖНІЙ\n";
197
return;
198
}
199
200
$cartItems = $this->cart->getItems();
201
202
$i = 1;
203
204
echo "№ НАЗВА
ЦІНА
КІЛЬКІСТЬ
ВАРТІСТЬ\n";
205
echo "---------------------------------\n";
206
foreach ($cartItems as $name => $qty) {
207
$good = $this->catalog->getGoodByName($name);
208
$sum = $good["price"] * $qty;

25
209
210

printf("%-2s %-24s %6s %9s %9s\n", $i++,
prettifyGoodName($name), $good["price"], $qty, $sum);
211
}
212
echo "---------------------------------\n";
213
214
$total = $this->cart->calculateTotal($this->catalog);
215
printf("РАЗОМ ДО СПЛАТИ: %s\n", $total);
216
}
217
218
private function renderCart(): void {
219
if ($this->cart->isEmpty()) {
220
echo "КОШИK ПОРОЖНІЙ\n";
221
return;
222
}
223
224
$cartItems = $this->cart->getItems();
225
226
echo "У КОШИКУ:\nНАЗВА
КІЛЬКІСТЬ\n";
227
228
echo "---------------------------------\n";
229
foreach ($cartItems as $name => $qty) {
230
$good = $this->catalog->getGoodByName($name);
231
$sum = $good["price"] * $qty;
232
233
printf("%-24s %5s\n", prettifyGoodName($name), $qty);
234
}
235
echo "---------------------------------\n";
236
}
237
238
private function setupProfile(): void {
239
do {
240
echo "Ваше імʼя: ";
241
242
$userName = $this->getUserInput();;
243
} while (!preg_match("/^\p{L}+$/u", $userName));
244
245
$this->user->setName($userName);
246
247
do {
248
echo "Ваш вік: ";
249
250
$userAge = $this->getUserInput();
251
$inRange = $userAge >= Restrictions::$MIN_AGE && $userAge
<= Restrictions::$MAX_AGE;
252
} while (!preg_match("/^\d+$/u", $userAge) || !$inRange);
253
254
$this->user->setAge($userAge);
255
}
256
257
private function getUserInput(): string {
258
$input = fgets(STDIN);
259
260
return $input ? trim($input) : "";
261
}
262 }

26
263
264 $app = new App();
265
266 $app->run();

